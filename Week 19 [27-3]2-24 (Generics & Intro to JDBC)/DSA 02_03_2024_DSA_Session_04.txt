Searching Algorithm
+++++++++++++++++++
1.Linear Search
2.Binary Search


LinearSearch
++++++++++++
 => This type of searching is best suited,when the no of elements are small and the data is not sorted.
 => if the no of elements are more and if the data is sorted, we prefer not to work with LinearSearch.

Algorithm: LinearSearch(a[0....n],key)
//Searches for the key element in an array

//input  :: An array a[0....n] of  unOrdered elements and key element to be found
//Output :: if key element found return the index of the element otherwise return -1

for i<-0 to n do
	if a[i] == key
		return index
		stop;
return -1;

Code using Java
+++++++++++++++
import java.util.Scanner;

class LinearSearchApp 
{
	public static void main(String[] args) 
	{
		Scanner scan = new Scanner(System.in);

		System.out.print("Enter the size of an array :: ");
		int n = scan.nextInt();

		//Creating an Array
		int[] arr = new int[n];
		
		//loop to read the array elements
		for (int i=0;i<= n-1;i++ )
		{
			System.out.print("Enter the array element:: ");
			arr[i] = scan.nextInt();
		}

		//Asking to enter the key element
		System.out.print("Enter the key element :: ");
		int key =scan.nextInt();

		int index = linear_search(arr,n,key);

		//processing it based on the index value
		if (index > 0)
		{
			System.out.println("Key element found at :: "+index);
		}
		else
		{
			System.out.println("Key element not found...");
		}
	}
	public static int  linear_search(int[] arr,int n, int key)
	{
		for(int i=0;i<=n-1;i++)
		{
			if (key==arr[i])
			{
				return i+1;
			}		
		}
		return -1;
	}
}
Output
Enter the size of an array :: 5
Enter the array element:: 33
Enter the array element:: 11
Enter the array element:: 99
Enter the array element:: 77
Enter the array element:: 88
Enter the key element :: 100
Key element not found...


BinarySearch
++++++++++++
 => This type of searching is best suited,when the no of elements are large and the data is in sorted manner.
 
Algorithm: Binary_Search(a[0....n],key)
//Searches for the key element in an array

//input  :: An array a[0....n] of  Ordered elements and key element to be found
//Output :: if key element found return the index of the element otherwise return -1


L = 0
H = n-1
while low<=high
	mid =(low+high)/2
	if key<a[mid]
   		H=mid-1
	if Key>a[mid]
   		L=mid+1
	if key==a[mid]
   		return mid
return -1;

Code using Java
+++++++++++++++
import java.util.*;

class BinarySearchApp 
{
	public static void main(String[] args) 
	{
		Scanner scan = new Scanner(System.in);

		System.out.print("Enter the size of an array :: ");
		int n = scan.nextInt();

		//Creating an Array
		int[] arr = new int[n];
		
		//loop to read the array elements
		for (int i=0;i<= n-1;i++ )
		{
			System.out.print("Enter the array element:: ");
			arr[i] = scan.nextInt();
		}

		//Asking to enter the key element
		System.out.print("Enter the key element :: ");
		int key =scan.nextInt();

		int index = binary_search(arr,n,key);

		//processing it based on the index value
		if (index == -1)
		{
			System.out.println("Key element not found");
		}
		else
		{
			System.out.println("Key element found at index :: "+index);
		}
	}

	public static int binary_search(int[] arr,int n,int key)
	{
		int L = 0;
		int H = n-1;
		while (L<=H)
		{
			int mid =(L+H)/2;
			if (key==arr[mid])
				return mid;
			else if(key > arr[mid])
				L=mid+1;
			else if(key < arr[mid])
				H=mid-1;
		}
		return -1;
	}
}
Output
Enter the size of an array :: 5
Enter the array element:: 100
Enter the array element:: 200
Enter the array element:: 300
Enter the array element:: 400
Enter the array element:: 500
Enter the key element :: 200
Key element found at index :: 1

Enter the size of an array :: 5
Enter the array element:: 100
Enter the array element:: 200
Enter the array element:: 300
Enter the array element:: 400
Enter the array element:: 500
Enter the key element :: 250
Key element not found


   









