Working with Date Object
++++++++++++++++++++++++

Converting the String format data to java.sql.Date to work with PreparedStatement

 1. String ------> SimpleDateFormat -----> java.util.Date -----> java.sql.Date ---pstmt--->DOB

Note:
  If the input is in the following format(yyyy-MM-dd) then we can convert the String to java.sql.Date as follows
	String s ="";
	java.sql.Date date = java.sql.Date.valueOf(s);


Assignement
+++++++++++
Person
  |=> pid(PrimaryKey: int), pname(varachar(20)),paddress(varchar(20)
  |=> DOB(date), DOM(date), DOJ(date)

Input format
 DOB :: dd-MM-yyyy
 DOM :: MM-dd-yyyy
 DOJ :: yyyy-MM-dd(directly convert)


Working with Date Object in MySQL Database(format :: yyyy-MM-dd)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
mysql> use pwskills_octbatch
Database changed

mysql> show tables;
+-----------------------------+
| Tables_in_pwskills_octbatch |
+-----------------------------+
| student                     |
+-----------------------------+
1 row in set (0.03 sec)

mysql> create table users
		(id int NOT NULL AUTO_INCREMENT, 
			username varchar(20),
			dob DATE,
		primary key(id));
Query OK, 0 rows affected (0.12 sec)

mysql> desc users;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| id       | int         | NO   | PRI | NULL    | auto_increment |
| username | varchar(20) | YES  |     | NULL    |                |
| dob      | date        | YES  |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
3 rows in set (0.02 sec)

Note: In case of java.text.SimpleDateFormat class, the pattern we specify is predefined so we need to know how to specify.
		yyyy : year
		dd   : date
		MM   : month
	
	System.out.print("Enter the DOB(dd-MM-yyyy):: ");
	String dob = scanner.next();
	SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

eg#1.
package com.pwskills.nitin;

import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Scanner;

import com.pwksills.utility.DBUtil;

public class InsertApp {

	private static final String SQL_INSERT_QUERY = "insert into users(`username`,`dob`) values(?,?)";

	public static void main(String[] args) {

		// Resource used
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		int rowCount = 0;

		try {
			connection = DBUtil.getDBConection();

			if (connection != null)
				preparedStatement = connection.prepareStatement(SQL_INSERT_QUERY);

			Scanner scanner = new Scanner(System.in);

			if (preparedStatement != null && scanner != null) {

				System.out.print("Enter the username:: ");
				String username = scanner.next();

				System.out.print("Enter the DOB(dd-MM-yyyy):: ");
				String dob = scanner.next();

				// set the values to the '?' placeholder[Formatting is not required]
				preparedStatement.setString(1, username);
				preparedStatement.setDate(2, convertToSQLDate(dob));

				// Execute the query now with the inputs
				rowCount = preparedStatement.executeUpdate();

			}
			if (rowCount == 0) {
				System.out.println("Insertion of records failed...");
			} else {
				System.out.println("No of records inserted is :: " + rowCount);
			}

			scanner.close();

		} catch (IOException | SQLException | ParseException e) {
			e.printStackTrace();
		} finally {
			DBUtil.cleanUpResources(null, preparedStatement, connection);
		}
	}

	private static Date convertToSQLDate(String dob) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		java.util.Date utilDate = sdf.parse(dob);
		long inputMs = utilDate.getTime();
		java.sql.Date sqlDate = new java.sql.Date(inputMs);
		return sqlDate;
	}
}
Output
Enter the username:: kohli
Enter the DOB(dd-MM-yyyy):: 05-11-1988
No of records inserted is :: 1

SQL Output
++++++++++
mysql> select id,username,dob from users;
+----+----------+------------+
| id | username | dob        |
+----+----------+------------+
|  2 | sachin   | 1973-04-24 |
|  3 | dhoni    | 1981-07-07 |
|  4 | kohli    | 1988-11-05 |
+----+----------+------------+


Retreiving the data from Database
+++++++++++++++++++++++++++++++++
1. java.sql.Date ---------SimpleDateFormat(pattern)------format(java.sql.date)-----> String-------> EndUSER


package com.pwskills.nitin;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Scanner;

import com.pwksills.utility.DBUtil;

public class SelectApp {
	private static final String SQL_SELECT_QUERY = "select id,username,dob from users where id = ?";

	public static void main(String[] args) {

		// Resources used
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int id = 0;

		try {

			connection = DBUtil.getDBConection();

			// 2. Create a Statement Object
			if (connection != null) {
				preparedStatement = connection.prepareStatement(SQL_SELECT_QUERY);
			}

			Scanner scanner = new Scanner(System.in);

			if (preparedStatement != null && scanner != null) {

				System.out.print("Enter the id of the user:: ");
				id = scanner.nextInt();

				// Set the value to the placeholder '?'
				preparedStatement.setInt(1, id);

				// Execute the Query
				resultSet = preparedStatement.executeQuery();
			}

			// 4. Process the Result
			if (resultSet.next()) {
				System.out.println("ID\tNAME\tDOB");
				System.out.println(resultSet.getInt(1) + "\t" + resultSet.getString(2) + "\t"
						+ convertoString(resultSet.getDate(3)));
			} else {
				System.out.println("Record not found for the given id :: " + id);
			}
			scanner.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.cleanUpResources(resultSet, preparedStatement, connection);
		}
	}
	
	private static String convertoString(Date date) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		return sdf.format(date);
	}
}

Output
Enter the id of the user:: 3
ID	NAME	DOB
3	dhoni	07-07-1981

	
Query to calculate the age of the person using "dob"
++++++++++++++++++++++++++++++++++++++++++++++++++++
mysql> select DATE_FORMAT(from_days(datediff(now(),dob)),'%Y') as AGE from users where id = 3;
+------+
| AGE  |
+------+
| 0042 |
+------+


eg#1.
package com.pwskills.nitin;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

import com.pwksills.utility.DBUtil;

public class CalculateAgeApp {
	private static final String SQL_SELECT_QUERY = "select DATE_FORMAT(from_days(datediff(now(),dob)),'%Y') as AGE from users where id = ?";

	public static void main(String[] args) {

		// Resources used
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int id = 0;

		try {

			connection = DBUtil.getDBConection();

			// 2. Create a Statement Object
			if (connection != null) {
				preparedStatement = connection.prepareStatement(SQL_SELECT_QUERY);
			}

			Scanner scanner = new Scanner(System.in);

			if (preparedStatement != null && scanner != null) {

				System.out.print("Enter the id of the user:: ");
				id = scanner.nextInt();

				// Set the value to the placeholder '?'
				preparedStatement.setInt(1, id);

				// Execute the Query
				resultSet = preparedStatement.executeQuery();
			}

			// 4. Process the Result
			if (resultSet.next()) {
				System.out.println("The age is :: "+resultSet.getInt(1));
			} else {
				System.out.println("Record not found for the given id :: " + id);
			}
			scanner.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.cleanUpResources(resultSet, preparedStatement, connection);
		}
	}
}

Output
Enter the id of the user:: 3
The age is :: 42


Working with inserting images in the database
+++++++++++++++++++++++++++++++++++++++++++++
BLOB -> Binary LargeObject.
CLOB -> Character LargeObject

To store images,pdffiles,word doc in database we use a datatype called "TinyBlob,Blob,MedimBlob,LongBlob(4gb)".
To store text file,csv files in database we use a datatype called "TinyText,Text,MediumText,LongText(4gb)".

Assignment
  |=> NAUKRI_PORTAL
	  |=> regNo(AI),name(varachar(20)), address(varchar(20))
          |=> photo(longblob)
	  |=> resume(longtext)


Query to create a table in MySQL Database
+++++++++++++++++++++++++++++++++++++++++
mysql> create table person(
		id int NOT NULL AUTO_INCREMENT, 
		name varchar(20),
		photo LONGBLOB, 
		primary key(id));
Query OK, 0 rows affected (0.04 sec)

mysql> desc person;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(20) | YES  |     | NULL    |                |
| photo | longblob    | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
3 rows in set (0.01 sec)


Code without buffer for copying the data from InputStream to OutputStream
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
private static String displayImageInfo(InputStream binaryStream) throws IOException {

	String location = "download.jpg";
	FileOutputStream fos = new FileOutputStream(location);

	int data = binaryStream.read();
	while (data != -1) {
		fos.write(data);
		data = binaryStream.read();
	}
	fos.close();
	binaryStream.close();
	return "Succesfuly Downloaded with the file name as  " + location;
}

Code with Buffer for Copying the data from InputStream to OutputStream
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
private static String displayImageInfo(InputStream binaryStream) throws IOException {

	String location = "download.jpg";
	FileOutputStream fos = new FileOutputStream(location);

	byte[] imageBuffer = new byte[1024];
	while (binaryStream.read(imageBuffer) > 0) {
		fos.write(imageBuffer);
	}

	fos.close();
	binaryStream.close();
	return "Succesfuly Downloaded with the file name as  " + location;
}

Since the above logic is same for copying the data from InputStream to OutputStream, we need not write this code rather we take the help of
"Third party code" called as "API code/Framework code".

API CODE => Zipping the .class file => JAR
APACHE Company -> IO
Download from the following link :: https://mvnrepository.com/artifact/commons-io/commons-io/2.7


Code using API  for Copying the data from InputStream to OutputStream
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
IOUtils.copy(resultSet.getBinaryStream(3), new FileOutputStream(imageName));


eg#1.
package com.pwskills.nitin;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

import org.apache.commons.io.IOUtils;

import com.pwksills.utility.DBUtil;

public class SelectApp {
	private static final String SQL_SELECT_QUERY = "select id,name,photo from person where id = ?";

	public static void main(String[] args) {

		// Resources used
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int id = 0;

		try {

			connection = DBUtil.getDBConection();

			// 2. Create a Statement Object
			if (connection != null) {
				preparedStatement = connection.prepareStatement(SQL_SELECT_QUERY);
			}

			Scanner scanner = new Scanner(System.in);

			if (preparedStatement != null && scanner != null) {

				System.out.print("Enter the id of the user:: ");
				id = scanner.nextInt();

				// Set the value to the placeholder '?'
				preparedStatement.setInt(1, id);

				// Execute the Query
				resultSet = preparedStatement.executeQuery();
			}

			// 4. Process the Result
			if (resultSet.next()) {
				System.out.println("ID\tNAME\tPHOTO");
				String imageName = "download.jpg";
				
				//Framework Code or API Code
				IOUtils.copy(resultSet.getBinaryStream(3), new FileOutputStream(imageName));
				
				System.out.println(resultSet.getInt(1) + "\t" + resultSet.getString(2) + "\t"+imageName);

			} else {
				System.out.println("Record not found for the given id :: " + id);
			}
			scanner.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.cleanUpResources(resultSet, preparedStatement, connection);
		}
	}

}
Output
Enter the id of the user:: 1
ID	NAME	PHOTO
1	nitin	download.jpg


working with text files in MysQL database
+++++++++++++++++++++++++++++++++++++++++
mysql> create table employee(
		eid int NOT NULL AUTO_INCREMENT, 
		ename varchar(20),
		eaddress varchar(20),
		resume longtext, 
		primary key(eid));
Query OK, 0 rows affected (0.04 sec)


mysql> desc employee;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| eid      | int         | NO   | PRI | NULL    | auto_increment |
| ename    | varchar(20) | YES  |     | NULL    |                |
| eaddress | varchar(20) | YES  |     | NULL    |                |
| resume   | longtext    | YES  |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)


Retrieval of CLOB operation
+++++++++++++++++++++++++++
package com.pwskills.nitin;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

import org.apache.commons.io.IOUtils;

import com.pwksills.utility.DBUtil;

public class SelectApp {
	private static final String SQL_SELECT_QUERY = "select eid,ename,eaddress,resume from employee where eid = ?";

	public static void main(String[] args) {

		// Resources used
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		int eid = 0;

		try {

			connection = DBUtil.getDBConection();

			// 2. Create a Statement Object
			if (connection != null) {
				preparedStatement = connection.prepareStatement(SQL_SELECT_QUERY);
			}

			Scanner scanner = new Scanner(System.in);

			if (preparedStatement != null && scanner != null) {

				System.out.print("Enter the id of the employee:: ");
				eid = scanner.nextInt();

				// Set the value to the placeholder '?'
				preparedStatement.setInt(1, eid);

				// Execute the Query
				resultSet = preparedStatement.executeQuery();
			}

			// 4. Process the Result
			if (resultSet.next()) {
				System.out.println("EID\tENAME\tEADDRESS\tRESUME");
				String resumeLocation = "download_resume.txt";

				// Framework Code or API Code
				FileWriter fileWriter = new FileWriter(new File(resumeLocation));
				IOUtils.copy(resultSet.getCharacterStream(4), fileWriter);
				fileWriter.flush();

				System.out.println(resultSet.getInt(1) + "\t" + resultSet.getString(2) + "\t" + resultSet.getString(3)
						+ "\t" + resumeLocation);

			} else {
				System.out.println("Record not found for the given id :: " + eid);
			}
			scanner.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.cleanUpResources(resultSet, preparedStatement, connection);
		}
	}

}
Output
Enter the id of the employee:: 1
EID	ENAME	EADDRESS	RESUME
1	nitin	bengaluru	download_resume.txt


Note: Working with update operation
 a.Enter the id of the record to be updated: 3
        OldName is :: sachin
        Enter new Name :  ........
	
	oldAge is  :: 51
	Enter new Age : ....

	oldAddres is :: MI
        Enter new Address : (press enter key)

	Record updated succesfully...

 b.Enter the id of the record to be updated: 10
	Record not found for updation. 
	




















 